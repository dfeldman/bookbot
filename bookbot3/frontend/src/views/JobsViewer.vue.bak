<template>
  <div class="jobs-viewer">
    <h1>Jobs</h1>
    <p>Monitor background tasks and processing jobs</p>
    
    <!-- Basic Controls -->
    <div>
      <select v-model="selectedBookId">
        <option value="">All Books</option>
      </select>
      <button @click="loadJobs">Refresh</button>
    </div>

    <!-- Simple Stats -->
    <div v-if="jobs.length > 0">
      <p>Total: {{ jobStats.total }}</p>
      <p>Running: {{ jobStats.running }}</p>
      <p>Complete: {{ jobStats.complete }}</p>
    </div>
    
    <!-- Basic Job List -->
    <div v-for="job in sortedJobs" :key="job.job_id">
      <p>{{ job.job_type }} - {{ job.state }}</p>
      <button @click="viewJobDetails(job.job_id)">View</button>
    </div>
  </div>
</template>

<script setup lang="ts">
// Imports
import { ref, computed, onMounted, onUnmounted, watch } from 'vue'
import { useRouter } from 'vue-router'
import { useBookStore } from '../stores/book'
import { useJobStore } from '../stores/jobStore'
import type { Job } from '../stores/book'
import { apiService } from '../services/api'

// Setup stores and router
const router = useRouter()
const bookStore = useBookStore()
const jobStore = useJobStore()

// Local state
const selectedBookId = ref('')
const selectedState = ref('')

// Basic computed properties
const jobs = computed(() => jobStore.allJobs)
const loading = computed(() => jobStore.isJobsViewerLoading)
const books = computed(() => bookStore.books)

// Cost total
const grandTotalCost = computed(() => {
  return jobs.value.reduce((total, job) => total + (job.total_cost || 0), 0)
})

// Job statistics
const jobStats = computed(() => {
  const stats = {
    total: jobs.value.length,
    waiting: 0,
    running: 0,
    completed: 0,
    failed: 0,
    cancelled: 0,
    complete: 0,
    error: 0
  }
  
  jobs.value.forEach(job => {
    switch (job.state) {
      case 'waiting':
        stats.waiting++
        break
      case 'running':
        stats.running++
        break
      case 'complete':
        stats.completed++
        stats.complete++ // For template compatibility
        break
      case 'error':
        stats.failed++
        stats.error++ // For template compatibility
        break
      case 'cancelled':
        stats.cancelled++
        break
    }
  })
  
  return stats
})
const sortedJobs = computed(() => {
  return [...jobs.value].sort((a, b) => {
    // Sort by created_at (newest first)
    return new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
  })
})

// Methods
async function loadJobs() {
  await jobStore.fetchAllJobs(selectedBookId.value || undefined, selectedState.value || undefined)
}

async function cancelJob(jobId: string) {
  if (!confirm('Are you sure you want to cancel this job?')) {
    return
  }
  try {
    await apiService.cancelJob(jobId)
    await loadJobs() // Refresh the list
  } catch (error) {
    console.error('Failed to cancel job:', error)
    alert('Failed to cancel job. Please try again.')
  }
}

function viewJobDetails(jobId: string) {
  router.push(`/jobs/${jobId}`)
}

function viewJobLogs(jobId: string) {
  router.push(`/jobs/${jobId}/logs`)
}

// Formatting & Utility Functions
function getJobDuration(job: Job): string {
  if (!job.started_at) {
    return 'Pending...'
  }

  const start = new Date(job.started_at).getTime()
  const end = job.completed_at ? new Date(job.completed_at).getTime() : new Date().getTime()

  let duration = Math.max(0, end - start)

  const seconds = Math.floor((duration / 1000) % 60)
  const minutes = Math.floor((duration / (1000 * 60)) % 60)
  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24)

  if (hours > 0) {
    return `${hours}h ${minutes}m ${seconds}s`
  }
  if (minutes > 0) {
    return `${minutes}m ${seconds}s`
  }
  return `${seconds}s`
}

function getStatusIcon(state: string): string {
  const icons: { [key: string]: string } = {
    waiting: '⏳',
    running: '⚡',
    completed: '✅',
    failed: '❌',
    error: '❌',
    cancelled: '🚫'
  }
  return icons[state] || '❓'
}

function formatJobState(state: string): string {
  if (!state) return ''
  return state.charAt(0).toUpperCase() + state.slice(1)
}

function formatJobType(jobType: string): string {
  if (!jobType) return ''
  return jobType
    .split('_')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')
}

function formatJobProps(props: any): string {
  if (!props || typeof props !== 'object') return ''
  
  const entries = Object.entries(props)
  if (entries.length === 0) return ''
  
  // Show first few key properties
  const displayEntries = entries.slice(0, 2)
  let result = displayEntries.map(([key, value]) => `${key}: ${value}`).join(', ')
  
  if (entries.length > 2) {
    result += ` +${entries.length - 2} more`
  }
  
  return result
}

function getBookName(bookId: string): string {
  const book = bookStore.books.find(b => b.id === bookId)
  return book?.title || 'Unknown Book'
}

function formatDateTime(dateString: string): string {
  if (!dateString) return 'N/A'
  return new Date(dateString).toLocaleString()
}

function getRelativeTime(dateString: string): string {
  if (!dateString) return 'N/A'
  const date = new Date(dateString)
  const now = new Date()
  const diffMs = now.getTime() - date.getTime()
  
  const diffSeconds = Math.round(diffMs / 1000)
  const diffMinutes = Math.round(diffMs / (1000 * 60))
  const diffHours = Math.round(diffMs / (1000 * 60 * 60))
  const diffDays = Math.round(diffMs / (1000 * 60 * 60 * 24))
  
  if (diffSeconds < 60) return `${diffSeconds}s ago`
  if (diffMinutes < 60) return `${diffMinutes}m ago`
  if (diffHours < 24) return `${diffHours}h ago`
  return `${diffDays}d ago`
}

function formatCurrency(value: number | null | undefined): string {
  if (value === null || value === undefined) {
    return '$0.00'
  }
  return value.toLocaleString('en-US', {
    style: 'currency',
    currency: 'USD'
  })
}

// Lifecycle and Watchers
let pollingInterval: number | null = null;

onMounted(() => {
  if (bookStore.books.length === 0) {
    bookStore.fetchBooks()
  }
  loadJobs()
  // Poll for updates every 5 seconds
  pollingInterval = setInterval(loadJobs, 5000);
})

onUnmounted(() => {
  // Clear the interval when the component is no longer visible
  if (pollingInterval) {
    clearInterval(pollingInterval);
  }
});

watch([selectedBookId, selectedState], loadJobs)

  if (diffMinutes < 60) return `${diffMinutes}m ago`
  if (diffHours < 24) return `${diffHours}h ago`
  return `${diffDays}d ago`
}

function formatDuration(job: Job): string {
  if (!job.started_at) {
    return job.state === 'waiting' ? 'Not started' : '-'
  }
  
  const startTime = new Date(job.started_at).getTime()
  const endTime = job.completed_at ? new Date(job.completed_at).getTime() : Date.now()
  const durationMs = endTime - startTime
  
  const seconds = Math.floor(durationMs / 1000)
  const minutes = Math.floor(seconds / 60)
  const hours = Math.floor(minutes / 60)
  
  if (hours > 0) {
    return `${hours}h ${minutes % 60}m`
  } else if (minutes > 0) {
    return `${minutes}m ${seconds % 60}s`
  } else {
    return `${seconds}s`
  }
}

function formatCurrency(value: number | null | undefined): string {
  if (value === null || typeof value === 'undefined' || Number.isNaN(value)) {
    return 'N/A';
  }
  return `$${value.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 6 })}`;
}

async function loadGrandTotalCost() {
  try {
    const data = await apiService.getTotalCostAllJobs();
    grandTotalCost.value = data.total_cost;
  } catch (error) {
    console.error('Failed to load grand total cost:', error);
    grandTotalCost.value = null;
  }
}

function startAutoRefresh() {
  // Refresh every 5 seconds if there are active jobs
  autoRefreshInterval.value = window.setInterval(() => {
    const hasActiveJobs = jobs.value.some(job => job.state === 'running' || job.state === 'waiting')
    if (hasActiveJobs) {
      loadJobs()
    }
  }, 5000)
}

function stopAutoRefresh() {
  if (autoRefreshInterval.value) {
    clearInterval(autoRefreshInterval.value)
    autoRefreshInterval.value = null
  }
}

// Lifecycle
onMounted(async () => {
  await bookStore.loadBooks()
  // If no book is selected and there are books available, select the first one.
  if (!selectedBookId.value && books.value.length > 0) {
    selectedBookId.value = books.value[0].book_id
  }
  await loadJobs() // loadJobs now calls loadGrandTotalCost internally
  startAutoRefresh()
})

onUnmounted(() => {
  stopAutoRefresh()
})
</script>

<style scoped>
.jobs-viewer {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.jobs-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 2rem;
  gap: 2rem;
}

.title-section h1 {
  margin: 0 0 0.5rem 0;
  color: #2c3e50;
  font-size: 2rem;
}

.subtitle {
  margin: 0;
  color: #666;
  font-size: 1rem;
}

.filter-controls {
  display: flex;
  gap: 1rem;
  align-items: flex-end;
  flex-wrap: wrap;
}

.filter-group {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.filter-group label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #555;
}

.filter-group select {
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  background: white;
  min-width: 150px;
}

.refresh-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  background: #3498db;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.875rem;
}

.refresh-btn:hover {
  background: #2980b9;
}

.refresh-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.loading-state {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  padding: 4rem;
  color: #666;
}

.spinner {
  width: 20px;
  height: 20px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.empty-state {
  text-align: center;
  padding: 4rem;
  color: #666;
}

.empty-icon {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.jobs-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  gap: 1rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: white;
  border: 1px solid #e1e8ed;
  border-radius: 8px;
  padding: 1rem;
  text-align: center;
}

.stat-card.running {
  border-color: #f39c12;
  background: #fef9e7;
}

.stat-card.waiting {
  border-color: #3498db;
  background: #e8f4fd;
}

.stat-card.complete {
  border-color: #27ae60;
  background: #e8f5e8;
}

.stat-card.error {
  border-color: #e74c3c;
  background: #fdf2f2;
}

.stat-card.cost {
  border-color: #7f8c8d; /* A neutral grey */
  background: #ecf0f1; /* Light grey background */
}

.stat-number {
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 0.25rem;
}

.stat-label {
  font-size: 0.875rem;
  color: #666;
}

.jobs-table {
  background: white;
  border: 1px solid #e1e8ed;
  border-radius: 8px;
  overflow: hidden;
}

.table-header {
  display: grid;
  grid-template-columns: 120px 200px 150px 150px 100px 100px 120px; /* Status, Type, Book, Created, Duration, Cost, Actions */
  gap: 1rem;
  padding: 1rem;
  background: #f8f9fa;
  border-bottom: 1px solid #e1e8ed;
  font-weight: 600;
  font-size: 0.875rem;
  color: #555;
}

.job-row {
  display: grid;
  grid-template-columns: 120px 200px 150px 150px 100px 100px 120px; /* Status, Type, Book, Created, Duration, Cost, Actions */
  gap: 1rem;
  padding: 1rem;
  border-bottom: 1px solid #f0f0f0;
  cursor: pointer;
  transition: background-color 0.2s;
}

.job-row:hover {
  background: #f8f9fa;
}

.job-row:last-child {
  border-bottom: none;
}

.status-badge {
  display: inline-flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.25rem 0.5rem;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: 500;
}

.status-badge.waiting {
  background: #e8f4fd;
  color: #3498db;
}

.status-badge.running {
  background: #fef9e7;
  color: #f39c12;
}

.status-badge.complete {
  background: #e8f5e8;
  color: #27ae60;
}

.status-badge.error {
  background: #fdf2f2;
  color: #e74c3c;
}

.status-badge.cancelled {
  background: #f5f5f5;
  color: #666;
}

.job-type {
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.job-props {
  font-size: 0.75rem;
  color: #666;
}

.book-info {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.book-name {
  font-weight: 500;
}

.book-id {
  font-size: 0.75rem;
  color: #666;
  font-family: monospace;
}

.created-time {
  font-size: 0.875rem;
  margin-bottom: 0.25rem;
}

.created-relative {
  font-size: 0.75rem;
  color: #666;
}

.duration {
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.running-indicator {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  font-size: 0.75rem;
  color: #f39c12;
}

.pulse-dot {
  width: 6px;
  height: 6px;
  background: #f39c12;
  border-radius: 50%;
  animation: pulse 1.5s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.3; }
}

.col-actions {
  display: flex;
  gap: 0.5rem;
}

.action-btn {
  width: 28px;
  height: 28px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.75rem;
  transition: transform 0.2s;
}

.action-btn:hover {
  transform: scale(1.1);
}

.logs-btn {
  background: #3498db;
  color: white;
}

.cancel-btn {
  background: #e74c3c;
  color: white;
}

.details-btn {
  background: #95a5a6;
  color: white;
}

@media (max-width: 768px) {
  .jobs-viewer {
    padding: 1rem;
  }
  
  .jobs-header {
    flex-direction: column;
    gap: 1rem;
  }
  
  .filter-controls {
    width: 100%;
  }
  
  .table-header,
  .job-row {
    grid-template-columns: 1fr;
    gap: 0.5rem;
  }
  
  .table-header {
    display: none;
  }
  
  .job-row {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .jobs-stats {
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  }
}
</style>
