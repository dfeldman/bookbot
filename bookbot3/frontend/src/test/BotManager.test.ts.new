import { describe, it, expect, vi, beforeEach } from 'vitest'
import { mount } from '@vue/test-utils'
import { createPinia, setActivePinia } from 'pinia'
import BotManager from '@/components/BotManager.vue'
import { useBookStore } from '@/stores/book'
import { apiService } from '@/services/api'

// Mock the API service
vi.mock('@/services/api', () => ({
  apiService: {
    getChunks: vi.fn(),
    createChunk: vi.fn(),
    updateChunk: vi.fn(),
    deleteChunk: vi.fn(),
  }
}))

// Mock vue-router
vi.mock('vue-router', () => ({
  useRoute: () => ({
    params: {
      bookId: '1'
    }
  }),
  useRouter: () => ({
    push: vi.fn()
  })
}))

describe('BotManager', () => {
  let wrapper: any
  let bookStore: any

  const mockBots = [
    {
      chunk_id: '1',
      book_id: '1',
      type: 'bot',
      chapter: null,
      order: 1,
      word_count: 0,
      version: 1,
      is_locked: false,
      is_deleted: false,
      is_latest: true,
      props: {
        name: 'Creative Writer',
        llm_alias: 'gpt-4',
        temperature: 0.8,
        description: 'A creative writing assistant for imaginative content',
        system_prompt: 'You are a creative writing assistant.',
      },
      created_at: '2023-01-01T00:00:00Z',
      updated_at: '2023-01-01T00:00:00Z'
    }
  ]

  beforeEach(() => {
    setActivePinia(createPinia())
    bookStore = useBookStore()
    
    // Set up store state
    bookStore.chunks = mockBots
    
    // Mock API responses
    vi.mocked(apiService.getChunks).mockResolvedValue({ chunks: mockBots })
    vi.mocked(apiService.createChunk).mockResolvedValue(mockBots[0])
    vi.mocked(apiService.updateChunk).mockResolvedValue(mockBots[0])
    vi.mocked(apiService.deleteChunk).mockResolvedValue(undefined)

    wrapper = mount(BotManager, {
      global: {
        plugins: [createPinia()],
      }
    })
  })

  describe('Component Rendering', () => {
    it('renders correctly', () => {
      expect(wrapper.exists()).toBe(true)
    })

    it('displays bot list when chunks are loaded', async () => {
      await wrapper.vm.$nextTick()
      expect(wrapper.vm).toBeDefined()
    })
  })

  describe('Error Handling', () => {
    it('handles API errors gracefully', async () => {
      const error = new Error('API Error')
      vi.mocked(apiService.getChunks).mockRejectedValue(error)

      wrapper = mount(BotManager, {
        global: {
          plugins: [createPinia()],
        }
      })

      await wrapper.vm.$nextTick()
      // Component should still render even with API errors
      expect(wrapper.exists()).toBe(true)
    })
  })
})
